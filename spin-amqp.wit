// WIT design guidelines https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md
// https://component-model.bytecodealliance.org/design/wit.html
package spin:amqp-trigger;

interface spin-amqp-types {
  /// General purpose error.
  variant error {
      other(string),
  }

  /// Format specification for messages 
  ///  - more info: https://github.com/clemensv/spec/blob/registry-extensions/registry/spec.md#message-formats
  ///  - message metadata can further decorate w/ things like format version, and so on.
  enum format-spec {
      cloudevents,
      http,
      amqp,
      mqtt,
      kafka,
      raw
  }

  /// A message with a binary payload, a format specification, and decorative metadata.
  record message {
      data: list<u8>,
      format: format-spec,
      metadata: option<list<tuple<string, string>>>
  }
}

world spin-amqp {
  use spin-amqp-types.{error, message};

  /// Whenever this guest receives a message in one of the subscribed channels, the message is sent to this handler
  export handler: func(ms: list<message>) -> result<_, error>;
}

world spin-amqp-sdk {
  import spin-amqp-types;
}